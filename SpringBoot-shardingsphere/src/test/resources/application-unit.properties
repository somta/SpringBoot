
# 配置mybatis的扫描路径
mybatis.mapper-locations=classpath*:mybatis/**/*Mapper.xml


# 配置真实数据源
spring.shardingsphere.datasource.names=ds1,ds2

# 打印 ShardingSphere 执行信息， 若启用未打印信息则调整使用的日志库的日志级别
spring.shardingsphere.props.sql-show=true
# 配置第 1 个数据源
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=${jdbc.driver-class-name}
spring.shardingsphere.datasource.ds1.jdbc-url=${jdbc.master.url}
spring.shardingsphere.datasource.ds1.username=${jdbc.master.username}
spring.shardingsphere.datasource.ds1.password=${jdbc.master.password}

# 配置第 2 个数据源
spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=${jdbc.driver-class-name}
spring.shardingsphere.datasource.ds2.jdbc-url=${jdbc.slave.url}
spring.shardingsphere.datasource.ds2.username=${jdbc.slave.username}
spring.shardingsphere.datasource.ds2.password=${jdbc.slave.password}

# 数据库的分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
# 数据库的分片算法的行表达式，多个表以逗号分隔
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=ds$->{id % 2 + 1}

# 数据库的分片列名称
spring.shardingsphere.rules.sharding.tables.t_user.database-strategy.standard.sharding-column=id
# 数据库的分片算法名称（可自定义实现）
spring.shardingsphere.rules.sharding.tables.t_user.database-strategy.standard.sharding-algorithm-name=database-inline


# 表的分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.table-inline.type=INLINE
# 表的分片算法的行表达式，多个表以逗号分隔
spring.shardingsphere.rules.sharding.sharding-algorithms.table-inline.props.algorithm-expression=t_user_$->{id % 2}

# 数据节点：由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔
#spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=ds1.t_user_$->{0..1}
# 同时分库分表后就要使用下面的配置设置数据节点
spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=ds$->{1..2}.t_user_$->{0..1}
# 表的分片列名称
spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.standard.sharding-column=id
# 表的分片算法名称（可自定义实现）
spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.standard.sharding-algorithm-name=table-inline





###############################以下是单元测试特有的配置######################################
#开启h2 web界面
spring.h2.console.enabled=true
#开启h2 web界面
spring.h2.console.path=/h2-console

jdbc.driver-class-name=org.h2.Driver
jdbc.master.url=jdbc:h2:mem:test-master;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL
jdbc.master.username=root
jdbc.master.password=123456
jdbc.slave.url=jdbc:h2:mem:test-slave;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL
jdbc.slave.username=root
jdbc.slave.password=123456

#利用H2初始化表和数据
spring.datasource.schema=classpath:db/schema.sql
spring.datasource.data=classpath:db/data.sql


